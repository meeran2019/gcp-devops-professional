-------------------------------------------------------------------------------------------------------
INTRODUCTION:
-------------------------------------------------------------------------------------------------------
Basics of docker:
    Dockerfile
    docker build
    docker pull
    dockr push 

-------------------------------------------------------------------------------------------------------
REGISTRY:
-------------------------------------------------------------------------------------------------------
It consists of Container registry and Artifact registry. 

Container registry:
    It is of host-name/project-id/image-name:tag 
    Host name is not specific to region.
    No IAM role is tagged.
    Host name is,
      gcr.io - Stores in United states data center.
      asia.gcr.io - Stores in asia data center.
      eu.gcr.io - Stores in EU data center.
      us.gcr.io - Stores in Unites states data center.
    $DEVSHELL_PROJECT_ID  - Environment variable to get current project id. 
    Internally creates bucket to store registry.
      
Artifact registry:
    It is advance to container registry.
    It supports roles. (reader, Writer, Administrator & repo administrator created by default)
    It isused to store images, artifacts like jfrog artifactory.
    Multiple repositories can create per project.
    Can create regional or multi regional level repositories.
    URL is us-central1-docker.pkg.dev/$PROJECT_ID/repo/image:tag
            us-central-1 can change depends upon region selected.    
    Configuration: 
        gcloud auth configure-docker us-central1-docker.pkg.dev  -> To configure docker to use google cloud cli to authenticate request to artifact registry in us-central.

-------------------------------------------------------------------------------------------------------
DEPLOY APPLICATIONS:
-------------------------------------------------------------------------------------------------------

Compute Options:

    Compute Engine: Like ec2.
    Kubernetes: like eks. Used to deploy containarized application. 
    App Engine: Serverless web application deployment.
    Cloud Run: Used to deploy containerized application.
    Cloud Function: Event triggered based function. 
    
Deployment Method:

    Blue/green
    Canary
    Rolling 
    Traffic Splitting: Send traffic to small percentage of users first (5% to v2 and 95% to v1 stable). It is used for A/B testing.

Google Cloud Function:

    It is event based trigger. 
        Events can be http, pub/sub, storage, firestore.
    Only one version active at any time, so it cannot roll back to previous version if any failure.
    To overcome this, require to create new functions and loadbalance it.
    
Google App Engine:

    It is used to deploy web application.
    It is earliest product and serverless. 
    Only one app engine can be deployed for one project.
    Environmant consists of,
        Standard
        Flexible    -   CUsom runtime.
    To deploy application, it requires,
        requirements.txt (for python)
        main.py (for python)
        app.yaml 
    Commands: 
        gcloud app deploy       -> deploy application and promote version.
        gcloud app deploy --no-promote --version name     -> deploy application code but not implement. 
    In Version, can Migrate Traffic (100%) and Split Traffic (partial)

Cloud Run:

    It introduced recently.
    Serverless 
    Its better version of app engine.
    Deploy containarized application.
    It is like ECS (to create a service)
    It is like AWS Batch (to create a job)
    Can "Edit and Deploy New revision" -> Manage revison to split traffic.

GKE (Google Kubernets Engine):

    It consists of,
        Create cluster:
            Node pools - create no of nodes.
        Workload deployment:
            create pods and deployments. 
        Expose application:
            Create a services type and expose the applications.
    
Compute Engine:

    General purpose computing machine.
    2 ways of deployment,
        containarized app
        non containarized app.
    Can install startup script (user data in aws)

Instance Template:

    It is like launch template/launch configuration in AWS.
    Create instance from template.
    
Instance Group:

    This is Auto Sacling Group (ASG) in AWS. 
    Used to manage group of instances.
    It consists of,
        New managed instance group (stateless):
                Give min and max no of instances.
                All machine family type is same. 
        New managed instance group (stateful):
                Give NO min and max no of instances but can select no of instances. 
        New unmanaged instance group:
                Manually manage group of load balancing VMs.
                Can select diff vm machine family type. 
                
Load balancer:
    
    create a load balancer type (http, tcp, udp)
    In backend service, select the instance group.


-------------------------------------------------------------------------------------------------------
PIPELINES:
-------------------------------------------------------------------------------------------------------

Source Code Management:
    Cloud Source Repository.

Build:
    Cloud Build 

Artifact Storage: 
    Artifact Registry 

Deploy:
    Cloud Deploy 

