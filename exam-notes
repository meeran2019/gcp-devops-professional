Legacy Agent: 
  It is monitoring agent. 
  Uses collectd service.
  
Uptime Check:
  It can be public and private uptime. 
  It support HTTP/HTTPS/TCP.
  Target can be, 
      Compute Engine
      Load balancer
      App Engine
      Cloud Run
      Kubernetes Load balancer 

Cloud Trace:  
   It is like app dynamics.
   Used to show the req/res time and latency of different components in microservices. 
   
Billing data recommendation:
  Google recommends billing data as,
    1. Create billing data for separate project. 
    2. Createa bigquery dataset for visualization.
    
Labelling and Grouping resources:
    Network tags - used to manage network traffic to/from VM.
    Labels - Billing breakdown.
    Security marks - for compliance requirement. 
    
Virutal Machine Networking: 
  Network Service tier:
      Premium - Traffic flows to google network and costly. 
      Standard - Traffic uses only entry and exit google point.

Cloud Debugger: 
  Used to find the state of app in real time.
  
Logs to SPlunk:
  Create a destination sink as Splunk and select the pub/sub topic. 

Choose SLI based on SLO:
  Discover what users expect from the system and choose SLIs to measure it.

Store Organizational Log:
  Creata a project and create a logging bucket. 
  Create a log sink from CLI and use --include-children flag (includes all projects in organization).

Factors to consider for data access Log:  
  It will increase log ingestion. 
  Possibility of exceeding log allotment limits. 
  Changing default retention incurs storage cost. 

Blue/Green deployment:
  Spinnaker and Jenkins is used for blue/green deployment. 
  Deployment manager is used for automate deployment of infrastructure. 

Jenkins - Google recommended deployment:
  Google is recommending to deploy Jenkis in Compute Engine and GKE.

Google recommendation for capacity planning:
  Design for graceful degradation.
  Carry out load testing.
  Implement monitoring and alerting.

Prevent Server Overload:
  Queue Management.
  Load shedding and graceful degradation.
  Retries 
  Better to avoid cross layer communication.

To detect vulnarabilities in images:
  Enable vulnarability scanning in container registry and artifact registry. 

VPC Flow logs:
  It captures network flows to/from VM instances and GKE.
  Can use filters in logs. 
  Can enable logs for each subnet level. 
  To capture log flow between pods which require "intranode visibility".
  Can modify logs using record_transformer plugin. 
  Firewall rules are not reason for no logging. 

Archive storage is most cost effective storage for data to be accessed once a year. 

Image management best practices:
  1. At image creation project, assign "compute.imageuser" role for "Image User group".
  2. At image creation project, assign "compute.instanceadmin" role fir "Image creation user"

Secret Manager: 
  Auto password rotation can enable only using API or CLI and cannot be done through console. 

Lowering the SLO is not recommended action when error budget is exhausted. 
Lowering SLO means lowering reliability of system.

Once incident is raised, then next assess the impact of incident. 

Custom FLuentd:
  In GKE, logging can be disabled and can use custom fluentd to filter sensitive data. 

Source code repository is connected with external vendor like github and bitbucket. 

Increase speed of coud build in docker:
  exclude files not needed using .gloudignore file.
  Select virtual machine with higher cpu. 
  Building leaner containers.
  Using kaniko cache. 
  using cached docker image. 
  Caching directories with cloud storage. 
  Avoid upload of unnecessary files using .gloudignore. 

GKE API enabled by default by Cloud Build before trigger. 

Metric Kind:
  Gauage Metric - value measures in specific instance in time. - used for memory utilization. 
  Delta metric - value measures the changes since last recorded.
  Cumulative metric - value constantly increase overtime. 

Cloud Run is natively integrated with Error Reporting. So no additional setup is required to capture. 


Monitoring -> Alerting -> Notification Channel:
    Pagerduty, Slack, Webhook, Email, SMS, Pub/Sub 

Load balancer Health Checks:
    It is based on category (health check or legacy health check), protocol (used to probe backend), port specification

Cloud Build Trigger Types:
    Github trigger, Bitbucket trigger, Manual trigger, pub/sub triggers, webhook url, Manual schedule, 

Cloud build Event:
    Push to branch, push new tag, pull request (not for source repo)

Cloud Build Approval:
    Option "Require approval before build executes".

Incident Team:
    Incident Command - holds high level state about incident. assign responsibilities according to needs. Holds all positions that are not delecated. Remove roadblocks.
    Operation work - Only group modifying the system during work.
    Communication - Public face. Issuing periodic updates to stakeholders. Keeping incident document uptodate and accurate. 
    PLanning - Supoprts ops team by arranging handoff, dinner, filing bugs, ordering dinner.

GKE Monitoring:
    GKE -> CLusters -> Features -> Enable Logging (System/Workloads/APIServer/Scheduler/Controller) -> Enable CLoud Monitoring (System/APIServer/Controller/Scheduler)
    Monitoring and logging agent is already installed in GKE and no need of require to install and just require to enable it. 

Monitoring:
    Monitoring Editor - In console, Grand permission to add/remove projects to scope. 

Exclusion filter works after logging API has called and logs are in cloud logging. 

To capture logs in centralized project: It require to create logging bucket in centralized projeact and From other project create sink with destination as centralized logging project. 

To capture OS level logs: Install google-fluentd-catch-all package on instances. 

Cloud Build Schedule: 
    1. Trigger should be  MANUAL.
    2. Click "RUN ON SCHEDULE" operations.
    3. Enable CLoud Scheduler API. 
    4. Once deleted cloud build, delete cloud scheduler also. 

Source Repository: 
  At repo level, can assign permission to them. 

Container Registry: 
  At registry level to give permission. 

Cloud Profiler:
  It is a statistical low overhead profiler that continuosly gathers CPU usage and Memory allocation information from production applications. 
  Types of profile available,
    CPU Time, Memory, Heap, Contention, Threads, Wall time.

  Incase "Planning Lead" is not assumed, Incident Commander will assume the role. 

  Error budget should be used to control the frequency of new release to production. 

  Log Sink Destination:
      Cloud storage Solution - Takes hour 
      Pub/Sub - Takes seconds and useful for real time.
      Bigquery - Takes minutes. 

catch-all is configuration of logging agent. 

Standalone JVM Monitoring Plugin: 
    Cloud monitoring can monitor JVM process for common java metrics in linux only. 

In cloud build config, image field is used to declare image for both container registry and artifact registry.

Types of Logs:  
  Admin user
  Data access 
  System logs
  Access transparency: It provides you with logs of action taken by google staff. 

  End of workday - Handover command to incident commander in another location. 

  Cloud Profiler in App Engine: 
    Cloud profiler is used to continuosly gather CPU and memory usage from application.
    It involces, 
      Cloud profiler API needs to be enabled. 
      Add to requirements.txt file so it can be downloaded (add google-cloud-profiler to requirements.txt). 
      It need to imported and started. (import googlecloudprofiler module and call googlecloudprofiler.start function)
      NOTE: In APP Engine, user cannot access underlying instance so cannot install package manually. 

Cloud Build, Artifact field is used to specify non container artifact storage location. 

pub/sub and cloud logging are global services. 













